# generated by datamodel-codegen:
#   filename:  public_rooms_response.yaml
#   timestamp: 2024-06-01T22:41:36+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import AnyUrl, BaseModel, Field


class PublicRoomsChunk(BaseModel):
    canonical_alias: Optional[str] = Field(
        None,
        description="The canonical alias of the room, if any.",
        examples=["#general:example.org"],
    )
    name: Optional[str] = Field(
        None, description="The name of the room, if any.", examples=["General Chat"]
    )
    num_joined_members: int = Field(
        ..., description="The number of members joined to the room.", examples=[42]
    )
    room_id: str = Field(
        ..., description="The ID of the room.", examples=["!abcdefg:example.org"]
    )
    topic: Optional[str] = Field(
        None,
        description="The topic of the room, if any.",
        examples=["All things general"],
    )
    world_readable: bool = Field(
        ...,
        description="Whether the room may be viewed by guest users without joining.",
        examples=[False],
    )
    guest_can_join: bool = Field(
        ...,
        description="Whether guest users may join the room and participate in it.\nIf they can, they will be subject to ordinary power level\nrules like any other user.",
        examples=[True],
    )
    avatar_url: Optional[AnyUrl] = Field(
        None,
        description="The URL for the room's avatar, if one is set.",
        examples=["mxc://example.org/abcdef"],
    )
    join_rule: Optional[str] = Field(
        None,
        description="The room's join rule. When not present, the room is assumed to\nbe `public`.",
        examples=["public"],
    )
    room_type: Optional[str] = Field(
        None,
        description="The `type` of room (from [`m.room.create`](/client-server-api/#mroomcreate)), if any.",
    )


class ChunkItem(PublicRoomsChunk):
    join_rule: Optional[str] = Field(
        None,
        description="The room's join rule. When not present, the room is assumed to\nbe `public`. Note that rooms with `invite` join rules are not\nexpected here, but rooms with `knock` rules are given their\nnear-public nature.",
        examples=["public"],
    )


class Model(BaseModel):
    chunk: List[ChunkItem] = Field(
        ..., description="A paginated chunk of public rooms."
    )
    next_batch: Optional[str] = Field(
        None,
        description="A pagination token for the response. The absence of this token\nmeans there are no more results to fetch and the client should\nstop paginating.",
    )
    prev_batch: Optional[str] = Field(
        None,
        description="A pagination token that allows fetching previous results. The\nabsence of this token means there are no results before this\nbatch, i.e. this is the first batch.",
    )
    total_room_count_estimate: Optional[int] = Field(
        None,
        description="An estimate on the total number of public rooms, if the\nserver has an estimate.",
    )
